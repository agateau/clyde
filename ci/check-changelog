#!/bin/bash
set -euo pipefail

PROGNAME=$(basename $0)

SKIP_CHANGELOG="Changelog: skip"

die() {
    echo "$PROGNAME: $*" >&2
    exit 1
}

usage() {
    if [ "$*" != "" ] ; then
        echo "Error: $*"
        echo
    fi

    cat << EOF
Usage: $PROGNAME [OPTION ...] <base-ref> <head-ref>

Check the commits between base-ref and head-ref contains either a changelog
entry, or that one of the commit messages contains the line:

$SKIP_CHANGELOG

Options:
  -h, --help          display this usage message and exit
EOF

    exit 1
}

has_changelog() {
    local out=$(git diff --name-status "$BASE_REF..$HEAD_REF" -- .changes | grep '^[AM]')
    [ -n "$out" ]
}

has_skip_changelog() {
    local out=$(git log --grep "^$SKIP_CHANGELOG\$" "$BASE_REF..$HEAD_REF" --)
    [ -n "$out" ]
}

BASE_REF=""
HEAD_REF=""
while [ $# -gt 0 ] ; do
    case "$1" in
    -h|--help)
        usage
        ;;
    -*)
        usage "Unknown option '$1'"
        ;;
    *)
        if [ -z "$BASE_REF" ] ; then
            BASE_REF="$1"
        elif [ -z "$HEAD_REF" ] ; then
            HEAD_REF="$1"
        else
            usage "Too many arguments"
        fi
        ;;
    esac
    shift
done

if [ -z "$HEAD_REF" ] ; then
    usage "Not enough arguments"
fi

echo "Checking for changelog entry..."
echo

if has_changelog ; then
    echo "Changelog entry found"
    exit 0
fi
if has_skip_changelog ; then
    echo "'$SKIP_CHANGELOG' commit found"
    exit 0
fi

cat << EOF
Error: Could not find any changelog entry or any commit containing the '$SKIP_CHANGELOG' line.
Either add a changelog entry with [Changie][1] or add a '$SKIP_CHANGELOG' line in one of the commit messages.

[1]: https://changie.dev
EOF
exit 1
